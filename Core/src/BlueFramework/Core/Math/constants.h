// Copied and modified code from "CML (Configurable Math Library)" library.
// This library is available under the Boost Software License. Original copyright notice:

/// Boost Software License - Version 1.0 - August 17th, 2003
///
/// Permission is hereby granted, free of charge, to any person or organization
/// obtaining a copy of the software and accompanying documentation covered by
/// this license(the "Software") to use, reproduce, display, distribute,
/// execute, and transmit the Software, and to prepare derivative works of the
/// Software, and to permit third - parties to whom the Software is furnished to
/// do so, all subject to the following :
///
/// The copyright notices in the Software and this entire statement, including
/// the above license grant, this restriction and the following disclaimer,
/// must be included in all copies of the Software, in whole or in part, and
/// all derivative works of the Software, unless such copies or derivative
/// works are solely in the form of machine - executable object code generated by
/// a source language processor.
///
/// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
/// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
/// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON - INFRINGEMENT.IN NO EVENT
/// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
/// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
/// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
/// DEALINGS IN THE SOFTWARE.

// More details can be found in README.md file in the root directory.

#pragma once
#ifndef BlueFramework_Core_constants_b707864a_c0f2_45e5_81c5_c85033d3bd47_h
#define BlueFramework_Core_constants_b707864a_c0f2_45e5_81c5_c85033d3bd47_h

#include <BlueFramework/Core/namespace.h>
#include <cmath>

#if !defined(M_PI)
#define M_PI 3.14159265358979323846264338327950288
#endif

#if !defined(M_SQRT2)
#define M_SQRT2 1.41421356237309504880168872420969808
#endif

#if !defined(M_E)
#define M_E 2.71828182845904523536028747135266250
#endif

BLUEFRAMEWORK_CORE_MATH_NAMESPACE_BEGIN

template <typename Real>
struct constants {
	static Real pi() {
		return Real(M_PI);
	}
	static Real two_pi() {
		return Real(2. * M_PI);
	}
	static Real inv_pi() {
		return Real(1. / M_PI);
	}
	static Real inv_two_pi() {
		return Real(1. / (2. * M_PI));
	}
	static Real pi_over_2() {
		return Real(M_PI / 2.);
	}
	static Real pi_over_4() {
		return Real(M_PI / 4.);
	}
	static Real deg_per_rad() {
		return Real(180. / M_PI);
	}
	static Real rad_per_deg() {
		return Real(M_PI / 180.);
	}

	static Real sqrt_2() {
		return Real(M_SQRT2);
	}
	static Real sqrt_3() {
		return Real(1.732050807568877293527446341505);
	}
	static Real sqrt_5() {
		return Real(2.236067977499789696409173668731);
	}
	static Real sqrt_6() {
		return Real(2.449489742783178098197284074705);
	}

	static Real e() {
		return Real(M_E);
	}
};

typedef constants<float> constantsf;
typedef constants<double> constantsd;

BLUEFRAMEWORK_CORE_MATH_NAMESPACE_END

BLUEFRAMEWORK_CORE_MATH_EMBED_INTO_BUW_NAMESPACE(constants);
BLUEFRAMEWORK_CORE_MATH_EMBED_INTO_BUW_NAMESPACE(constantsf);
BLUEFRAMEWORK_CORE_MATH_EMBED_INTO_BUW_NAMESPACE(constantsd);

#endif // end define BlueFramework_Core_constants_b707864a_c0f2_45e5_81c5_c85033d3bd47_h